name: Generate and Publish OpenAPI Documentation

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'API version (leave empty for auto-increment)'
        required: false
        type: string
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Generate OpenAPI documentation
        run: SPRING_PROFILES_ACTIVE=local ./gradlew generateOpenApiDocs
        continue-on-error: true

      - name: Determine API version
        id: version
        run: |

          mkdir -p /tmp/openapi-docs
          cp build/openapi/openapi.json /tmp/openapi-docs/

          if [ -n "${{ github.event.inputs.version }}" ]; then

            echo "Using manually specified version: ${{ github.event.inputs.version }}"
            echo "api_version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else

            git fetch origin docs || true
            if git ls-remote --heads origin docs | grep docs; then

              mkdir -p /tmp/docs-check
              cd /tmp/docs-check
              git init
              git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
              git fetch --depth=1 origin docs
              git checkout FETCH_HEAD
              LATEST_VERSION=$(find . -maxdepth 1 -type d -name "v*" | sort -V | tail -n 1 | sed 's/.*\/v//' || echo "0")
              cd -
              rm -rf /tmp/docs-check
            else
              LATEST_VERSION="0"
            fi
            NEW_VERSION=$((LATEST_VERSION + 1))
            echo "Auto-incrementing to version: $NEW_VERSION"
            echo "api_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi


      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global init.defaultBranch main

      - name: Create clean orphan docs branch
        run: |

          mkdir -p /tmp/clean-docs
          cd /tmp/clean-docs


          git init
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"


          VERSION_DIR="v${{ steps.version.outputs.api_version }}"
          mkdir -p "$VERSION_DIR"
          mkdir -p latest


          cp /tmp/openapi-docs/openapi.json "$VERSION_DIR/"
          cp /tmp/openapi-docs/openapi.json latest/


          if git ls-remote --heads "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" docs | grep docs; then

            mkdir -p /tmp/prev-docs
            cd /tmp/prev-docs
            git init
            git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
            git fetch --depth=1 origin docs
            git checkout FETCH_HEAD


            find . -maxdepth 1 -type d -name "v*" | grep -v "v${{ steps.version.outputs.api_version }}" | while read dir; do
              cp -r "$dir" "/tmp/clean-docs/"
            done

            cd /tmp/clean-docs
          fi



          echo "" >> README.md
          echo "This branch contains OpenAPI specifications for the API." >> README.md
          echo "Latest version: v${{ steps.version.outputs.api_version }}" >> README.md


          git add .
          git commit -m "Update OpenAPI documentation to version ${{ steps.version.outputs.api_version }}"


          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin HEAD:docs


          mkdir -p "$GITHUB_WORKSPACE/api-docs"
          cp -r . "$GITHUB_WORKSPACE/api-docs/"

      - name: Upload OpenAPI docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-docs
          path: api-docs/
