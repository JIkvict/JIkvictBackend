name: Generate and Publish OpenAPI Documentation

on:
  workflow_call:
    inputs:
      version:
        description: 'API version to publish (optional, falls back to gradle :printVersion)'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'API version to publish (optional, falls back to gradle :printVersion)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Generate OpenAPI documentation
        run: SPRING_PROFILES_ACTIVE=local ./gradlew generateOpenApiDocs

      - name: Determine API version
        id: version
        run: |
          mkdir -p /tmp/openapi-docs
          cp build/openapi/openapi.json /tmp/openapi-docs/

          if [ -n "${{ inputs.version }}" ]; then
            echo "Using provided version: ${{ inputs.version }}"
            echo "api_version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(./gradlew -q :printVersion | tr -d '\n')
            echo "Resolved version from Gradle: $VERSION"
            echo "api_version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Commit OpenAPI docs into docs branch (no history rewrite)
        env:
          API_VERSION: ${{ steps.version.outputs.api_version }}
        run: |
          # Ensure we are on docs branch (create it if needed)
          if git ls-remote --heads origin docs | grep -q refs/heads/docs; then
            git fetch origin docs:docs
            git checkout docs
          else
            git checkout -b docs
          fi

          VERSION_DIR="v${API_VERSION}"
          mkdir -p "${VERSION_DIR}"

          # Copy the generated spec into versioned folder
          cp /tmp/openapi-docs/openapi.json "${VERSION_DIR}/openapi.json"

          # Optional: maintain a latest copy pointing to most recent
          echo "v${API_VERSION}" > LATEST_VERSION

          git add "${VERSION_DIR}" LATEST_VERSION
          git commit -m "docs: add OpenAPI spec for version v${API_VERSION}" || echo "No changes to commit"
          git push origin HEAD:docs

      - name: Upload OpenAPI docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-docs
          path: |
            build/openapi/openapi.json
